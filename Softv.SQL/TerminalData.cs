
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.TerminalData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Terminal Data Access Object
    /// File                    : TerminalDAO.cs
    /// Creation date           : 18/02/2017
    /// Creation time           : 01:21 p. m.
    ///</summary>
    public class TerminalData : TerminalProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Terminal"> Object Terminal added to List</param>
        public override int AddTerminal(TerminalEntity entity_Terminal)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalAdd", connection);

                AssingParameter(comandoSql, "@SAN", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdSuscriptor", entity_Terminal.IdSuscriptor);

                AssingParameter(comandoSql, "@IdServicio", entity_Terminal.IdServicio);

                AssingParameter(comandoSql, "@Latitud", entity_Terminal.Latitud);

                AssingParameter(comandoSql, "@Longitud", entity_Terminal.Longitud);

                AssingParameter(comandoSql, "@Estatus", entity_Terminal.Estatus);

                AssingParameter(comandoSql, "@FechaAlta", entity_Terminal.FechaAlta);

                AssingParameter(comandoSql, "@FechaSuspension", entity_Terminal.FechaSuspension);

                AssingParameter(comandoSql, "@ESN", entity_Terminal.ESN);

                AssingParameter(comandoSql, "@Comentarios", entity_Terminal.Comentarios);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Terminal " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@SAN"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Terminal
        ///</summary>
        /// <param name="">  SAN to delete </param>
        public override int DeleteTerminal(long? SAN)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalDelete", connection);

                AssingParameter(comandoSql, "@SAN", SAN);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Terminal
        ///</summary>
        /// <param name="Terminal"> Objeto Terminal a editar </param>
        public override int EditTerminal(TerminalEntity entity_Terminal)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalEdit", connection);

                AssingParameter(comandoSql, "@SAN", entity_Terminal.SAN);

                AssingParameter(comandoSql, "@IdSuscriptor", entity_Terminal.IdSuscriptor);

                AssingParameter(comandoSql, "@IdServicio", entity_Terminal.IdServicio);

                AssingParameter(comandoSql, "@Latitud", entity_Terminal.Latitud);

                AssingParameter(comandoSql, "@Longitud", entity_Terminal.Longitud);

                AssingParameter(comandoSql, "@Estatus", entity_Terminal.Estatus);

                AssingParameter(comandoSql, "@FechaAlta", entity_Terminal.FechaAlta);

                AssingParameter(comandoSql, "@FechaSuspension", entity_Terminal.FechaSuspension);

                AssingParameter(comandoSql, "@ESN", entity_Terminal.ESN);

                AssingParameter(comandoSql, "@Comentarios", entity_Terminal.Comentarios);

                AssingParameter(comandoSql, "@SatellitedID", entity_Terminal.SatellitedID);

                AssingParameter(comandoSql, "@BeamID", entity_Terminal.BeamID);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }





        public override int TerminalInformacionAdicional(TerminalEntity entity_Terminal)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("TerminalInformacionAdicional", connection);

                AssingParameter(comandoSql, "@SatelliteID", entity_Terminal.SatellitedID);

                AssingParameter(comandoSql, "@BeamID", entity_Terminal.BeamID);

                AssingParameter(comandoSql, "@SAN", entity_Terminal.SAN);

                AssingParameter(comandoSql, "@Polarization", entity_Terminal.Polarization);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }























        /// <summary>
        /// Gets all Terminal
        ///</summary>
        public override List<TerminalEntity> GetTerminal()
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }




        public override List<TerminalEntity> GetDeepIdSuscriptor(long? IdSuscriptor)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("BuscarTerminal_ByIdSucursal", connection);

                AssingParameter(comandoSql, "@IdSuscriptor", IdSuscriptor);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }























        public override List<TerminalEntity> GetFilterTerminalList(long? SAN, String Suscriptor, String Estatus,int ? IdBeam,string ESN, string satelite ,int? IdServicio, int? Op)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("FiltrosBusquedaTerminales", connection);

                AssingParameter(comandoSql, "@SAN", SAN);
                AssingParameter(comandoSql, "@Suscriptor", Suscriptor);
                AssingParameter(comandoSql, "@Estatus", Estatus);
                AssingParameter(comandoSql, "@Servicio", IdServicio);
                AssingParameter(comandoSql, "@IdBeam", IdBeam);
                AssingParameter(comandoSql, "@ESN", ESN);
                AssingParameter(comandoSql, "@satelite", satelite);
                AssingParameter(comandoSql, "@Op", Op);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }


        public override List<TerminalEntity> GetTerminaByIdSusList(long? IdSuscriptor)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("BuscarTerminal_ByIdSucursal", connection);

                AssingParameter(comandoSql, "@IdSuscriptor", IdSuscriptor);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }





        public override TerminalEntity GetByTerminal(long? SAN)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("MuestraTerminalGetById", connection);
                TerminalEntity entity_Terminal = null;


                AssingParameter(comandoSql, "@SAN", SAN);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Terminal = GetByTerminalFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Terminal;
            }

        }














































        /// <summary>
        /// Gets all Terminal by List<int>
        ///</summary>
        public override List<TerminalEntity> GetTerminal(List<int> lid)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }
        

        /// <summary>
        /// Gets Terminal by
        ///</summary>
        public override TerminalEntity GetTerminalById(long? SAN)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetById", connection);
                TerminalEntity entity_Terminal = null;


                AssingParameter(comandoSql, "@SAN", SAN);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Terminal = GetTerminalFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Terminal;
            }

        }


        public override List<TerminalEntity> GetTerminalByIdServicio(int? IdServicio)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetByIdServicio", connection);

                AssingParameter(comandoSql, "@IdServicio", IdServicio);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }

        public override List<TerminalEntity> GetTerminalByIdSuscriptor(long? IdSuscriptor)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetByIdSuscriptor", connection);

                AssingParameter(comandoSql, "@IdSuscriptor", IdSuscriptor);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }

        public override List<TerminalEntity> GetTerminalBySAN(long? SAN)
        {
            List<TerminalEntity> TerminalList = new List<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetBySAN", connection);

                AssingParameter(comandoSql, "@SAN", SAN);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TerminalList.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TerminalList;
        }


        /// <summary>
        ///Get Terminal
        ///</summary>
        public override SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TerminalEntity> entities = new SoftvList<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetTerminalCount();
                return entities ?? new SoftvList<TerminalEntity>();
            }
        }

        /// <summary>
        ///Get Terminal
        ///</summary>
        public override SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TerminalEntity> entities = new SoftvList<TerminalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetTerminalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetTerminalCount(xml);
                return entities ?? new SoftvList<TerminalEntity>();
            }
        }

        /// <summary>
        ///Get Count Terminal
        ///</summary>
        public int GetTerminalCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Terminal
        ///</summary>
        public int GetTerminalCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Terminal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TerminalGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Terminal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
