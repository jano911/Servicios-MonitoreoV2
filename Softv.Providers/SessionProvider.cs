
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.SessionProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Session Provider
    /// File                    : SessionProvider.cs
    /// Creation date           : 13/12/2015
    /// Creation time           : 10:46 a. m.
    /// </summary>
    public abstract class SessionProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Session from DB
        /// </summary>
        private static SessionProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Session instance
        /// </summary>
        public static SessionProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Session.Assembly,
                    SoftvSettings.Settings.Session.DataClass);
                    _Instance = (SessionProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public SessionProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Session
        ///  /summary>
        /// <param name="Session"></param>
        /// <returns></returns>
        public abstract int AddSession(SessionEntity entity_Session);

        /// <summary>
        /// Abstract method to delete Session
        /// </summary>
        public abstract int DeleteSession(long? IdSession);

        /// <summary>
        /// Abstract method to update Session
        /// </summary>
        public abstract int EditSession(SessionEntity entity_Session);

        /// <summary>
        /// Abstract method to get all Session
        /// </summary>
        public abstract List<SessionEntity> GetSession();

        /// <summary>
        /// Abstract method to get all Session List<int> lid
        /// </summary>
        public abstract List<SessionEntity> GetSession(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract SessionEntity GetSessionById(long? IdSession);


        public abstract List<SessionEntity> GetSessionByIdUsuario(int? IdUsuario);


        /// <summary>
        ///Get Session
        ///</summary>
        public abstract SoftvList<SessionEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Session
        ///</summary>
        public abstract SoftvList<SessionEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual SessionEntity GetSessionFromReader(IDataReader reader)
        {
            SessionEntity entity_Session = null;
            try
            {
                entity_Session = new SessionEntity();
                entity_Session.IdSession = (long?)(GetFromReader(reader, "IdSession"));
                entity_Session.IdUsuario = (int?)(GetFromReader(reader, "IdUsuario"));
                entity_Session.Token = (String)(GetFromReader(reader, "Token", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Session data to entity", ex);
            }
            return entity_Session;
        }

    }

    #region Customs Methods

    #endregion
}

