
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.PermisoProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Permiso Provider
    /// File                    : PermisoProvider.cs
    /// Creation date           : 12/12/2014
    /// Creation time           : 17:54
    /// </summary>
    public abstract partial class PermisoProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Permiso from DB
        /// </summary>
        private static PermisoProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Permiso instance
        /// </summary>
        public static PermisoProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Permiso.Assembly,
                    SoftvSettings.Settings.Permiso.DataClass);
                    _Instance = (PermisoProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public PermisoProvider()
        {
        }

        /// <summary>
        /// Abstract method to Marge Permiso
        ///  /summary>
        public abstract int MargePermiso(String xml);

        /// <summary>
        ///Get Xml Permiso
        ///</summary>
        public abstract SoftvList<PermisoEntity> GetXml(String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual PermisoEntity GetPermisoFromReader(IDataReader reader)
        {
            PermisoEntity entity_Permiso = null;
            try
            {
                entity_Permiso = new PermisoEntity();
                entity_Permiso.IdRol = (int?)(GetFromReader(reader, "IdRol"));
                entity_Permiso.IdModule = (int?)(GetFromReader(reader, "IdModule"));
                entity_Permiso.OptAdd = (bool)(GetFromReader(reader, "OptAdd"));
                entity_Permiso.OptSelect = (bool)(GetFromReader(reader, "OptSelect"));
                entity_Permiso.OptUpdate = (bool)(GetFromReader(reader, "OptUpdate"));
                entity_Permiso.OptDelete = (bool)(GetFromReader(reader, "OptDelete"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Permiso data to entity", ex);
            }
            return entity_Permiso;
        }


        public abstract List<PermisoEntity> GetPermisoRolList(int? IdRol);

        public abstract List<PermisoEntity> GetPermiso();


    }

}

