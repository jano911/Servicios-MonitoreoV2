
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.RoleProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Role Provider
    /// File                    : RoleProvider.cs
    /// Creation date           : 19/09/2015
    /// Creation time           : 03:46 p. m.
    /// </summary>
    public abstract class RoleProvider : Globals.DataAccess
    {
        /// <summary>
        /// Instance of Role from DB
        /// </summary>
        private static RoleProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Role instance
        /// </summary>
        public static RoleProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Role.Assembly,
                    SoftvSettings.Settings.Role.DataClass);
                    _Instance = (RoleProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public RoleProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Role
        ///  /summary>
        /// <param name="Role"></param>
        /// <returns></returns>
        public abstract int AddRole(RoleEntity entity_Role);

        /// <summary>
        /// Abstract method to delete Role
        /// </summary>
        public abstract int DeleteRole(int? IdRol);

        /// <summary>
        /// Abstract method to update Role
        /// </summary>
        public abstract int EditRole(RoleEntity entity_Role);

        /// <summary>
        /// Abstract method to get all Role
        /// </summary>
        public abstract List<RoleEntity> GetRole();

        public abstract List<RoleEntity> GetUpListPermisos(String xml);

        /// <summary>
        /// Abstract method to get all Role List<int> lid
        /// </summary>
        public abstract List<RoleEntity> GetRole(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract RoleEntity GetRoleById(int? IdRol);


        /// <summary>
        /// Abstract method to Change State Role
        /// </summary>
        public abstract int ChangeStateRole(int? IdRol, bool State);

        public abstract List<RoleEntity> GetComandos(String xml);
       

        /// <summary>
        ///Get Role
        ///</summary>
        public abstract SoftvList<RoleEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Role
        ///</summary>
        public abstract SoftvList<RoleEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual RoleEntity GetRoleFromReader(IDataReader reader)
        {
            RoleEntity entity_Role = null;
            try
            {
                entity_Role = new RoleEntity();
                entity_Role.IdRol = (int?)(GetFromReader(reader, "IdRol"));
                entity_Role.Nombre = (String)(GetFromReader(reader, "Nombre", IsString: true));
                entity_Role.Descripcion = (String)(GetFromReader(reader, "Descripcion", IsString: true));
                entity_Role.Estado = (bool?)(GetFromReader(reader, "Estado"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Role data to entity", ex);
            }
            return entity_Role;
        }

    }

    #region Customs Methods

    #endregion
}

