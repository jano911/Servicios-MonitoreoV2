
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.TerminalProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Terminal Provider
    /// File                    : TerminalProvider.cs
    /// Creation date           : 18/02/2017
    /// Creation time           : 01:21 p. m.
    /// </summary>
    public abstract class TerminalProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Terminal from DB
        /// </summary>
        private static TerminalProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Terminal instance
        /// </summary>
        public static TerminalProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Terminal.Assembly,
                    SoftvSettings.Settings.Terminal.DataClass);
                    _Instance = (TerminalProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public TerminalProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Terminal
        ///  /summary>
        /// <param name="Terminal"></param>
        /// <returns></returns>
        public abstract int AddTerminal(TerminalEntity entity_Terminal);

        /// <summary>
        /// Abstract method to delete Terminal
        /// </summary>
        public abstract int DeleteTerminal(long? SAN);

        /// <summary>
        /// Abstract method to update Terminal
        /// </summary>
        public abstract int EditTerminal(TerminalEntity entity_Terminal);

        public abstract int TerminalInformacionAdicional(TerminalEntity entity_Terminal);

        /// <summary>
        /// Abstract method to get all Terminal
        /// </summary>
        public abstract List<TerminalEntity> GetTerminal();

        public abstract List<TerminalEntity> GetFilterTerminalList(long? SAN, String Suscriptor, String Estatus, int? IdBeam, string ESN, string satelite, int? IdServicio, int? Op);

        public abstract List<TerminalEntity> GetTerminaByIdSusList(long? IdSuscriptor);

        public abstract List<TerminalEntity> GetDeepIdSuscriptor(long? IdSuscriptor);

        /// <summary>
        /// Abstract method to get all Terminal List<int> lid
        /// </summary>
        public abstract List<TerminalEntity> GetTerminal(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract TerminalEntity GetTerminalById(long? SAN);

        public abstract TerminalEntity GetByTerminal(long? SAN);




        public abstract List<TerminalEntity> GetTerminalByIdServicio(int? IdServicio);

        public abstract List<TerminalEntity> GetTerminalByIdSuscriptor(long? IdSuscriptor);

        public abstract List<TerminalEntity> GetTerminalBySAN(long? SAN);


        /// <summary>
        ///Get Terminal
        ///</summary>
        public abstract SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Terminal
        ///</summary>
        public abstract SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual TerminalEntity GetTerminalFromReader(IDataReader reader)
        {
            TerminalEntity entity_Terminal = null;
            try
            {
                entity_Terminal = new TerminalEntity();
                entity_Terminal.SAN = (long?)(GetFromReader(reader, "SAN"));
                entity_Terminal.IdSuscriptor = (long?)(GetFromReader(reader, "IdSuscriptor"));
                entity_Terminal.IdServicio = (int?)(GetFromReader(reader, "IdServicio"));
                entity_Terminal.Latitud = (String)(GetFromReader(reader, "Latitud", IsString: true));
                entity_Terminal.Longitud = (String)(GetFromReader(reader, "Longitud", IsString: true));
                entity_Terminal.Estatus = (String)(GetFromReader(reader, "Estatus", IsString: true));
                entity_Terminal.FechaAlta = (String)(GetFromReader(reader, "FechaAlta", IsString: true));
                entity_Terminal.FechaSuspension = (String)(GetFromReader(reader, "FechaSuspension", IsString: true));
                entity_Terminal.ESN = (String)(GetFromReader(reader, "ESN", IsString: true));
                entity_Terminal.Comentarios = (String)(GetFromReader(reader, "Comentarios", IsString: true));
                entity_Terminal.Servicio = (String)(GetFromReader(reader, "Servicio", IsString: true));
                entity_Terminal.Suscriptor = (String)(GetFromReader(reader, "Suscriptor", IsString: true));
                entity_Terminal.SatellitedID = (String)(GetFromReader(reader, "SatellitedID", IsString: true));
                entity_Terminal.BeamID = (int?)(GetFromReader(reader, "BeamID"));
                entity_Terminal.Polarization = (String)(GetFromReader(reader, "Polarization", IsString: true));
                entity_Terminal.Referencia= (String)(GetFromReader(reader, "Referencia", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Terminal data to entity", ex);
            }
            return entity_Terminal;
        }



        protected virtual TerminalEntity GetByTerminalFromReader(IDataReader reader)
        {
            TerminalEntity entity_Terminal = null;
            try
            {
                entity_Terminal = new TerminalEntity();
                entity_Terminal.SAN = (long?)(GetFromReader(reader, "SAN"));
                entity_Terminal.IdSuscriptor = (long?)(GetFromReader(reader, "IdSuscriptor"));
                entity_Terminal.IdServicio = (int?)(GetFromReader(reader, "IdServicio"));
                entity_Terminal.Latitud = (String)(GetFromReader(reader, "Latitud", IsString: true));
                entity_Terminal.Longitud = (String)(GetFromReader(reader, "Longitud", IsString: true));
                entity_Terminal.Estatus = (String)(GetFromReader(reader, "Estatus", IsString: true));
                entity_Terminal.FechaAlta = (String)(GetFromReader(reader, "FechaAlta", IsString: true));
                entity_Terminal.FechaSuspension = (String)(GetFromReader(reader, "FechaSuspension", IsString: true));                 
                entity_Terminal.ESN = (String)(GetFromReader(reader, "ESN", IsString: true));
                entity_Terminal.Comentarios = (String)(GetFromReader(reader, "Comentarios", IsString: true));
                entity_Terminal.Suscriptor = (String)(GetFromReader(reader, "Suscriptor", IsString: true));
                entity_Terminal.Servicio = (String)(GetFromReader(reader, "Servicio", IsString: true));
                entity_Terminal.SatellitedID = (String)(GetFromReader(reader, "SatellitedID", IsString: true));
                entity_Terminal.BeamID = (int?)(GetFromReader(reader, "BeamID"));
                entity_Terminal.Polarization = (String)(GetFromReader(reader, "Polarization", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Terminal data to entity", ex);
            }
            return entity_Terminal;
        }









    }

    #region Customs Methods

    #endregion
}

