
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.ModuleProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Module Provider
    /// File                    : ModuleProvider.cs
    /// Creation date           : 19/09/2015
    /// Creation time           : 03:47 p. m.
    /// </summary>
    public abstract class ModuleProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Module from DB
        /// </summary>
        private static ModuleProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Module instance
        /// </summary>
        public static ModuleProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Module.Assembly,
                    SoftvSettings.Settings.Module.DataClass);
                    _Instance = (ModuleProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public ModuleProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Module
        ///  /summary>
        /// <param name="Module"></param>
        /// <returns></returns>
        public abstract int AddModule(ModuleEntity entity_Module);

        /// <summary>
        /// Abstract method to delete Module
        /// </summary>
        public abstract int DeleteModule(int? IdModule);

        /// <summary>
        /// Abstract method to update Module
        /// </summary>
        public abstract int EditModule(ModuleEntity entity_Module);

        /// <summary>
        /// Abstract method to get all Module
        /// </summary>
        public abstract List<ModuleEntity> GetModule();

        /// <summary>
        /// Abstract method to get all Module List<int> lid
        /// </summary>
        public abstract List<ModuleEntity> GetModule(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract ModuleEntity GetModuleById(int? IdModule);


        public abstract List<ModuleEntity> GetModuleByIdModule(int? IdModule);


        /// <summary>
        ///Get Module
        ///</summary>
        public abstract SoftvList<ModuleEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Module
        ///</summary>
        public abstract SoftvList<ModuleEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual ModuleEntity GetModuleFromReader(IDataReader reader)
        {
            ModuleEntity entity_Module = null;
            try
            {
                entity_Module = new ModuleEntity();
                entity_Module.IdModule = (int?)(GetFromReader(reader, "IdModule"));
                entity_Module.Description = (String)(GetFromReader(reader, "Description", IsString: true));
                entity_Module.ModulePath = (String)(GetFromReader(reader, "ModulePath", IsString: true));
                entity_Module.ModuleView = (String)(GetFromReader(reader, "ModuleView", IsString: true));
                entity_Module.ParentId = (int?)(GetFromReader(reader, "ParentId"));
                entity_Module.SortOrder = (int?)(GetFromReader(reader, "SortOrder"));
                entity_Module.OptAdd = (bool?)(GetFromReader(reader, "OptAdd"));
                entity_Module.OptSelect = (bool?)(GetFromReader(reader, "OptSelect"));
                entity_Module.OptUpdate = (bool?)(GetFromReader(reader, "OptUpdate"));
                entity_Module.OptDelete = (bool?)(GetFromReader(reader, "OptDelete"));
                entity_Module.Icono = (String)(GetFromReader(reader, "Icono"));
                entity_Module.Display = (bool?)(GetFromReader(reader, "Display"));
                entity_Module.Viewname = (String)(GetFromReader(reader, "Viewname"));
                //entity_Module.DisplayName = (String)(GetFromReader(reader, "DisplayName"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Module data to entity", ex);
            }
            return entity_Module;
        }



        protected virtual ModuleEntity GetModule_permisosFromReader(IDataReader reader)
        {
            ModuleEntity entity_Module = null;
            try
            {
                entity_Module = new ModuleEntity();
                entity_Module.IdModule = (int?)(GetFromReader(reader, "Id"));
                entity_Module.IdModule = (int?)(GetFromReader(reader, "IdModule"));
                entity_Module.Description = (String)(GetFromReader(reader, "Description", IsString: true));
                entity_Module.ModulePath = (String)(GetFromReader(reader, "ModulePath", IsString: true));
                entity_Module.ModuleView = (String)(GetFromReader(reader, "ModuleView", IsString: true));
                entity_Module.ParentId = (int?)(GetFromReader(reader, "ParentId"));
                entity_Module.SortOrder = (int?)(GetFromReader(reader, "SortOrder"));
                entity_Module.OptAdd = (bool?)(GetFromReader(reader, "OptAdd"));
                entity_Module.OptSelect = (bool?)(GetFromReader(reader, "OptSelect"));
                entity_Module.OptUpdate = (bool?)(GetFromReader(reader, "OptUpdate"));
                entity_Module.OptDelete = (bool?)(GetFromReader(reader, "OptDelete"));
                entity_Module.Icono = (String)(GetFromReader(reader, "Icono"));
                entity_Module.Display = (bool?)(GetFromReader(reader, "Display"));
                entity_Module.Viewname = (String)(GetFromReader(reader, "Viewname"));
                entity_Module.DisplayName = (String)(GetFromReader(reader, "DisplayName"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Module data to entity", ex);
            }
            return entity_Module;
        }



        public abstract List<ModuleEntity> GetModulos_Permisos(int? idrol);

    }

    #region Customs Methods

    #endregion
}

