
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2015
/// Description             : UsuarioBussines
/// File                    : UsuarioBussines.cs
/// Creation date           : 19/09/2015
/// Creation time           : 03:46 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Usuario
    {

        #region Constructors
        public Usuario() { }
        #endregion

        /// <summary>
        ///Adds Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(UsuarioEntity objUsuario)
        {
            int result = ProviderSoftv.Usuario.AddUsuario(objUsuario);
            return result;
        }

        /// <summary>
        ///Delete Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdUsuario)
        {
            int resultado = ProviderSoftv.Usuario.DeleteUsuario(IdUsuario);
            return resultado;
        }

        /// <summary>
        ///Update Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(UsuarioEntity objUsuario)
        {
            int result = ProviderSoftv.Usuario.EditUsuario(objUsuario);
            return result;
        }

        /// <summary>
        ///Get Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UsuarioEntity> GetAll()
        {
            List<UsuarioEntity> entities = new List<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetUsuario();

            //List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).ToList());
            //lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            return entities ?? new List<UsuarioEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UsuarioEntity> GetAll2(String Nombre, String Email, String Usuario2, int? Op, int? IdRol)
        {
            List<UsuarioEntity> entities = new List<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetUsuario2(Nombre, Email, Usuario2, Op, IdRol);

            return entities ?? new List<UsuarioEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UsuarioEntity> GetUserListbyIdUser(int? IdUsuario)
        {
            List<UsuarioEntity> entities = new List<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetUserListbyIdUser(IdUsuario);

            return entities ?? new List<UsuarioEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UsuarioEntity GetExisteUser(String Usuario2, int? Op)
        {
            UsuarioEntity result = ProviderSoftv.Usuario.GetExisteUser(Usuario2, Op);

            return result;
        }













        /// <summary>
        ///Get Usuario List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UsuarioEntity> GetAll(List<int> lid)
        {
            List<UsuarioEntity> entities = new List<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetUsuario(lid);
            return entities ?? new List<UsuarioEntity>();
        }

        /// <summary>
        ///Get Usuario By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UsuarioEntity GetOne(int? IdUsuario)
        {
            UsuarioEntity result = ProviderSoftv.Usuario.GetUsuarioById(IdUsuario);

            if (result.IdRol != null)
                result.Role = ProviderSoftv.Role.GetRoleById(result.IdRol);

            return result;
        }

        /// <summary>
        ///Get Usuario By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UsuarioEntity GetOneDeep(int? IdUsuario)
        {
            UsuarioEntity result = ProviderSoftv.Usuario.GetUsuarioById(IdUsuario);

            if (result.IdRol != null)
                result.Role = ProviderSoftv.Role.GetRoleById(result.IdRol);

            return result;
        }

        /// <summary>
        ///Change State Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int ChangeState(int? IdUsuario, bool State)
        {
            int resultado = ProviderSoftv.Usuario.ChangeStateUsuario(IdUsuario, State);
            return resultado;
        }



        /// <summary>
        ///Get Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<UsuarioEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<UsuarioEntity> entities = new SoftvList<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetPagedList(pageIndex, pageSize);

            List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).Distinct().ToList());
            lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            return entities ?? new SoftvList<UsuarioEntity>();
        }

        /// <summary>
        ///Get Usuario
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<UsuarioEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<UsuarioEntity> entities = new SoftvList<UsuarioEntity>();
            entities = ProviderSoftv.Usuario.GetPagedList(pageIndex, pageSize, xml);

            List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).Distinct().ToList());
            lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            return entities ?? new SoftvList<UsuarioEntity>();
        }

        /// <summary>
        ///Get Usuario By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UsuarioEntity GetusuarioByUserAndPass(string Usuariox, string Pass)
        {
            UsuarioEntity result = ProviderSoftv.Usuario.GetusuarioByUserAndPass(Usuariox, Pass);

            if (result != null && result.IdRol != null)
                result.Role = ProviderSoftv.Role.GetRoleById(result.IdRol);

            return result;
        }




    }

    #region Customs Methods

    #endregion
}
