
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : SessionBussines
/// File                    : SessionBussines.cs
/// Creation date           : 13/12/2015
/// Creation time           : 10:46 a. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Session
    {

        #region Constructors
        public Session() { }
        #endregion

        /// <summary>
        ///Adds Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(SessionEntity objSession)
        {
            int result = ProviderSoftv.Session.AddSession(objSession);
            return result;
        }

        /// <summary>
        ///Delete Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(long? IdSession)
        {
            int resultado = ProviderSoftv.Session.DeleteSession(IdSession);
            return resultado;
        }

        /// <summary>
        ///Update Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(SessionEntity objSession)
        {
            int result = ProviderSoftv.Session.EditSession(objSession);
            return result;
        }

        /// <summary>
        ///Get Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<SessionEntity> GetAll()
        {
            List<SessionEntity> entities = new List<SessionEntity>();
            entities = ProviderSoftv.Session.GetSession();

            List<UsuarioEntity> lUsuario = ProviderSoftv.Usuario.GetUsuario(entities.Where(x => x.IdUsuario.HasValue).Select(x => x.IdUsuario.Value).ToList());
            lUsuario.ForEach(XUsuario => entities.Where(x => x.IdUsuario.HasValue).Where(x => x.IdUsuario == XUsuario.IdUsuario).ToList().ForEach(y => y.Usuario = XUsuario));

            return entities ?? new List<SessionEntity>();
        }

        /// <summary>
        ///Get Session List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<SessionEntity> GetAll(List<int> lid)
        {
            List<SessionEntity> entities = new List<SessionEntity>();
            entities = ProviderSoftv.Session.GetSession(lid);
            return entities ?? new List<SessionEntity>();
        }

        /// <summary>
        ///Get Session By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static SessionEntity GetOne(long? IdSession)
        {
            SessionEntity result = ProviderSoftv.Session.GetSessionById(IdSession);

            if (result.IdUsuario != null)
                result.Usuario = ProviderSoftv.Usuario.GetUsuarioById(result.IdUsuario);

            return result;
        }

        /// <summary>
        ///Get Session By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static SessionEntity GetOneDeep(long? IdSession)
        {
            SessionEntity result = ProviderSoftv.Session.GetSessionById(IdSession);

            if (result.IdUsuario != null)
                result.Usuario = ProviderSoftv.Usuario.GetUsuarioById(result.IdUsuario);

            return result;
        }

        public static List<SessionEntity> GetSessionByIdUsuario(int? IdUsuario)
        {
            List<SessionEntity> entities = new List<SessionEntity>();
            entities = ProviderSoftv.Session.GetSessionByIdUsuario(IdUsuario);
            return entities ?? new List<SessionEntity>();
        }



        /// <summary>
        ///Get Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<SessionEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<SessionEntity> entities = new SoftvList<SessionEntity>();
            entities = ProviderSoftv.Session.GetPagedList(pageIndex, pageSize);

            List<UsuarioEntity> lUsuario = ProviderSoftv.Usuario.GetUsuario(entities.Where(x => x.IdUsuario.HasValue).Select(x => x.IdUsuario.Value).Distinct().ToList());
            lUsuario.ForEach(XUsuario => entities.Where(x => x.IdUsuario.HasValue).Where(x => x.IdUsuario == XUsuario.IdUsuario).ToList().ForEach(y => y.Usuario = XUsuario));

            return entities ?? new SoftvList<SessionEntity>();
        }

        /// <summary>
        ///Get Session
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<SessionEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<SessionEntity> entities = new SoftvList<SessionEntity>();
            entities = ProviderSoftv.Session.GetPagedList(pageIndex, pageSize, xml);

            List<UsuarioEntity> lUsuario = ProviderSoftv.Usuario.GetUsuario(entities.Where(x => x.IdUsuario.HasValue).Select(x => x.IdUsuario.Value).Distinct().ToList());
            lUsuario.ForEach(XUsuario => entities.Where(x => x.IdUsuario.HasValue).Where(x => x.IdUsuario == XUsuario.IdUsuario).ToList().ForEach(y => y.Usuario = XUsuario));

            return entities ?? new SoftvList<SessionEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
