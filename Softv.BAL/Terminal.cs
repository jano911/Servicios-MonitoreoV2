
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : TerminalBussines
/// File                    : TerminalBussines.cs
/// Creation date           : 18/02/2017
/// Creation time           : 01:21 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Terminal
    {

        #region Constructors
        public Terminal() { }
        #endregion

        /// <summary>
        ///Adds Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(TerminalEntity objTerminal)
        {
            int result = ProviderSoftv.Terminal.AddTerminal(objTerminal);
            return result;
        }

        /// <summary>
        ///Delete Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(long? SAN)
        {
            int resultado = ProviderSoftv.Terminal.DeleteTerminal(SAN);
            return resultado;
        }

        /// <summary>
        ///Update Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(TerminalEntity objTerminal)
        {
            int result = ProviderSoftv.Terminal.EditTerminal(objTerminal);
            return result;
        }


        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int TerminalInformacionAdicional(TerminalEntity objTerminal)
        {
            int result = ProviderSoftv.Terminal.TerminalInformacionAdicional(objTerminal);
            return result;
        }



        /// <summary>
        ///Get Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TerminalEntity> GetAll()
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetTerminal();

            //List<ServicioEntity> lServicio = ProviderSoftv.Servicio.GetServicio(entities.Where(x => x.IdServicio.HasValue).Select(x => x.IdServicio.Value).ToList());
            //lServicio.ForEach(XServicio => entities.Where(x => x.IdServicio.HasValue).Where(x => x.IdServicio == XServicio.IdServicio).ToList().ForEach(y => y.Servicio = XServicio));

            //List<SuscriptorEntity> lSuscriptor = ProviderSoftv.Suscriptor.GetSuscriptor(entities.Where(x => x.IdSuscriptor.HasValue).Select(x => x.IdSuscriptor.Value).ToList());
            //lSuscriptor.ForEach(XSuscriptor => entities.Where(x => x.IdSuscriptor.HasValue).Where(x => x.IdSuscriptor == XSuscriptor.IdSuscriptor).ToList().ForEach(y => y.Suscriptor = XSuscriptor));

            //List<MovimientoEntity> lMovimiento = ProviderSoftv.Movimiento.GetMovimiento(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).ToList());
            //lMovimiento.ForEach(XMovimiento => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XMovimiento.SAN).ToList().ForEach(y => y.Movimiento = XMovimiento));

            //List<TicketEntity> lTicket = ProviderSoftv.Ticket.GetTicket(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).ToList());
            //lTicket.ForEach(XTicket => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XTicket.SAN).ToList().ForEach(y => y.Ticket = XTicket));

            return entities ?? new List<TerminalEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TerminalEntity> GetFilterTerminalList(long? SAN, String Suscriptor, String Estatus, int? IdBeam, string ESN, string satelite, int? IdServicio, int? Op)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetFilterTerminalList( SAN,  Suscriptor,  Estatus, IdBeam,  ESN,  satelite,  IdServicio,  Op);

            return entities ?? new List<TerminalEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TerminalEntity> GetTerminaByIdSusList(long? IdSuscriptor)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetTerminaByIdSusList(IdSuscriptor);

            return entities ?? new List<TerminalEntity>();
        }


        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TerminalEntity> GetDeepIdSuscriptor(long? IdSuscriptor)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetDeepIdSuscriptor(IdSuscriptor);

            return entities ?? new List<TerminalEntity>();
        }


       









        /// <summary>
        ///Get Terminal List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TerminalEntity> GetAll(List<int> lid)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetTerminal(lid);
            return entities ?? new List<TerminalEntity>();
        }

        /// <summary>
        ///Get Terminal By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TerminalEntity GetOne(long? SAN)
        {
            TerminalEntity result = ProviderSoftv.Terminal.GetTerminalById(SAN);

            //if (result.IdServicio != null)
            //    result.Servicio = ProviderSoftv.Servicio.GetServicioById(result.IdServicio);

            //if (result.IdSuscriptor != null)
            //    result.Suscriptor = ProviderSoftv.Suscriptor.GetSuscriptorById(result.IdSuscriptor);

            //if (result.SAN != null)
            //    result.Movimiento = ProviderSoftv.Movimiento.GetMovimientoById(result.SAN);

            //if (result.SAN != null)
            //    result.Ticket = ProviderSoftv.Ticket.GetTicketById(result.SAN);

            return result;
        }

        /// <summary>
        ///Get Terminal By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TerminalEntity GetOneDeep(long? SAN)
        {
            TerminalEntity result = ProviderSoftv.Terminal.GetTerminalById(SAN);

            //if (result.IdServicio != null)
            //    result.Servicio = ProviderSoftv.Servicio.GetServicioById(result.IdServicio);

            //if (result.IdSuscriptor != null)
            //    result.Suscriptor = ProviderSoftv.Suscriptor.GetSuscriptorById(result.IdSuscriptor);

            //if (result.SAN != null)
            //    result.Movimiento = ProviderSoftv.Movimiento.GetMovimientoById(result.SAN);

            //if (result.SAN != null)
            //    result.Ticket = ProviderSoftv.Ticket.GetTicketById(result.SAN);

            return result;
        }








        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TerminalEntity GetByTerminal(long? SAN)
        {
            TerminalEntity result = ProviderSoftv.Terminal.GetByTerminal(SAN);

            return result;
        }











        public static List<TerminalEntity> GetTerminalByIdServicio(int? IdServicio)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetTerminalByIdServicio(IdServicio);
            return entities ?? new List<TerminalEntity>();
        }

        public static List<TerminalEntity> GetTerminalByIdSuscriptor(long? IdSuscriptor)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetTerminalByIdSuscriptor(IdSuscriptor);
            return entities ?? new List<TerminalEntity>();
        }

        public static List<TerminalEntity> GetTerminalBySAN(long? SAN)
        {
            List<TerminalEntity> entities = new List<TerminalEntity>();
            //entities = ProviderSoftv.Terminal.GetTerminalBySAN(SAN);
            return entities ?? new List<TerminalEntity>();
        }



        /// <summary>
        ///Get Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TerminalEntity> entities = new SoftvList<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetPagedList(pageIndex, pageSize);

            //List<ServicioEntity> lServicio = ProviderSoftv.Servicio.GetServicio(entities.Where(x => x.IdServicio.HasValue).Select(x => x.IdServicio.Value).Distinct().ToList());
            //lServicio.ForEach(XServicio => entities.Where(x => x.IdServicio.HasValue).Where(x => x.IdServicio == XServicio.IdServicio).ToList().ForEach(y => y.Servicio = XServicio));

            //List<SuscriptorEntity> lSuscriptor = ProviderSoftv.Suscriptor.GetSuscriptor(entities.Where(x => x.IdSuscriptor.HasValue).Select(x => x.IdSuscriptor.Value).Distinct().ToList());
            //lSuscriptor.ForEach(XSuscriptor => entities.Where(x => x.IdSuscriptor.HasValue).Where(x => x.IdSuscriptor == XSuscriptor.IdSuscriptor).ToList().ForEach(y => y.Suscriptor = XSuscriptor));

            //List<MovimientoEntity> lMovimiento = ProviderSoftv.Movimiento.GetMovimiento(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).Distinct().ToList());
            //lMovimiento.ForEach(XMovimiento => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XMovimiento.SAN).ToList().ForEach(y => y.Movimiento = XMovimiento));

            //List<TicketEntity> lTicket = ProviderSoftv.Ticket.GetTicket(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).Distinct().ToList());
            //lTicket.ForEach(XTicket => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XTicket.SAN).ToList().ForEach(y => y.Ticket = XTicket));

            return entities ?? new SoftvList<TerminalEntity>();
        }

        /// <summary>
        ///Get Terminal
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TerminalEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TerminalEntity> entities = new SoftvList<TerminalEntity>();
            entities = ProviderSoftv.Terminal.GetPagedList(pageIndex, pageSize, xml);

            //List<ServicioEntity> lServicio = ProviderSoftv.Servicio.GetServicio(entities.Where(x => x.IdServicio.HasValue).Select(x => x.IdServicio.Value).Distinct().ToList());
            //lServicio.ForEach(XServicio => entities.Where(x => x.IdServicio.HasValue).Where(x => x.IdServicio == XServicio.IdServicio).ToList().ForEach(y => y.Servicio = XServicio));

            //List<SuscriptorEntity> lSuscriptor = ProviderSoftv.Suscriptor.GetSuscriptor(entities.Where(x => x.IdSuscriptor.HasValue).Select(x => x.IdSuscriptor.Value).Distinct().ToList());
            //lSuscriptor.ForEach(XSuscriptor => entities.Where(x => x.IdSuscriptor.HasValue).Where(x => x.IdSuscriptor == XSuscriptor.IdSuscriptor).ToList().ForEach(y => y.Suscriptor = XSuscriptor));

            //List<MovimientoEntity> lMovimiento = ProviderSoftv.Movimiento.GetMovimiento(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).Distinct().ToList());
            //lMovimiento.ForEach(XMovimiento => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XMovimiento.SAN).ToList().ForEach(y => y.Movimiento = XMovimiento));

            //List<TicketEntity> lTicket = ProviderSoftv.Ticket.GetTicket(entities.Where(x => x.SAN.HasValue).Select(x => x.SAN.Value).Distinct().ToList());
            //lTicket.ForEach(XTicket => entities.Where(x => x.SAN.HasValue).Where(x => x.SAN == XTicket.SAN).ToList().ForEach(y => y.Ticket = XTicket));

            return entities ?? new SoftvList<TerminalEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
