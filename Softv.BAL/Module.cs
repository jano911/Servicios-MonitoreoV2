
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2015
/// Description             : ModuleBussines
/// File                    : ModuleBussines.cs
/// Creation date           : 19/09/2015
/// Creation time           : 03:47 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Module
    {

        #region Constructors
        public Module() { }
        #endregion

        /// <summary>
        ///Adds Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(ModuleEntity objModule)
        {
            int result = ProviderSoftv.Module.AddModule(objModule);
            return result;
        }

        /// <summary>
        ///Delete Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdModule)
        {
            int resultado = ProviderSoftv.Module.DeleteModule(IdModule);
            return resultado;
        }

        /// <summary>
        ///Update Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(ModuleEntity objModule)
        {
            int result = ProviderSoftv.Module.EditModule(objModule);
            return result;
        }

        /// <summary>
        ///Get Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ModuleEntity> GetAll()
        {
            List<ModuleEntity> entities = new List<ModuleEntity>();
            entities = ProviderSoftv.Module.GetModule();

            //List<PermisoEntity> lPermiso = ProviderSoftv.Permiso.GetPermiso(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).ToList());
            //lPermiso.ForEach(XPermiso => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XPermiso.IdModule).ToList().ForEach(y => y.Permiso = XPermiso));

            return entities ?? new List<ModuleEntity>();
        }

        /// <summary>
        ///Get Module List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ModuleEntity> GetAll(List<int> lid)
        {
            List<ModuleEntity> entities = new List<ModuleEntity>();
            entities = ProviderSoftv.Module.GetModule(lid);
            return entities ?? new List<ModuleEntity>();
        }

        /// <summary>
        ///Get Module By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ModuleEntity GetOne(int? IdModule)
        {
            ModuleEntity result = ProviderSoftv.Module.GetModuleById(IdModule);


            return result;
        }

        /// <summary>
        ///Get Module By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ModuleEntity GetOneDeep(int? IdModule)
        {
            ModuleEntity result = ProviderSoftv.Module.GetModuleById(IdModule);

            //if (result.IdModule != null)
            //result.Permiso = ProviderSoftv.Permiso.GetPermisoById(result.IdModule);

            return result;
        }

        public static List<ModuleEntity> GetModuleByIdModule(int? IdModule)
        {
            List<ModuleEntity> entities = new List<ModuleEntity>();
            entities = ProviderSoftv.Module.GetModuleByIdModule(IdModule);
            return entities ?? new List<ModuleEntity>();
        }



        /// <summary>
        ///Get Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ModuleEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ModuleEntity> entities = new SoftvList<ModuleEntity>();
            entities = ProviderSoftv.Module.GetPagedList(pageIndex, pageSize);

            //List<PermisoEntity> lPermiso = ProviderSoftv.Permiso.GetPermiso(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).Distinct().ToList());
            //lPermiso.ForEach(XPermiso => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XPermiso.IdModule).ToList().ForEach(y => y.Permiso = XPermiso));

            return entities ?? new SoftvList<ModuleEntity>();
        }

        /// <summary>
        ///Get Module
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ModuleEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ModuleEntity> entities = new SoftvList<ModuleEntity>();
            entities = ProviderSoftv.Module.GetPagedList(pageIndex, pageSize, xml);

            //List<PermisoEntity> lPermiso = ProviderSoftv.Permiso.GetPermiso(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).Distinct().ToList());
            //lPermiso.ForEach(XPermiso => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XPermiso.IdModule).ToList().ForEach(y => y.Permiso = XPermiso));

            return entities ?? new SoftvList<ModuleEntity>();
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ModuleEntity> GetModulos_Permisos(int? idrol)
        {
            List<ModuleEntity> entities = new List<ModuleEntity>();
            entities = ProviderSoftv.Module.GetModulos_Permisos(idrol);
            return entities ?? new List<ModuleEntity>();

        }


    }




    #region Customs Methods

    #endregion
}
